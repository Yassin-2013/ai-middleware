// index.js

// استيراد المكتبات الضرورية
const { Configuration, OpenAIApi } = require('openai');
const { parse } = require('url');

// ضبط OpenAI
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// هذه الدالة هي المدخل الوحيد: Vercel سينفّذها لكل طلب وارد
module.exports = async (req, res) => {
  // 1) تفعيل CORS لجميع النشأة
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // رد سريع على preflight
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  //解析 المسار من الـ URL
  const { pathname } = parse(req.url);

  // 2) نقطة النهاية الافتراضية (GET /)
  if (req.method === 'GET' && pathname === '/') {
    return res
      .status(200)
      .send('IQ Test & Chat Middleware is up and running.');
  }

  // 3) تحليل نتائج الاختبار (POST /api/analyze)
  if (req.method === 'POST' && pathname === '/api/analyze') {
    try {
      const { userId, answers } = req.body;
      // بناء prompt
      const prompt = `
You are an IQ test analyst. The user (ID: ${userId}) completed an IQ test:
${answers
  .map(
    (a) =>
      `- Q${a.questionId}: ${a.correct ? 'Correct' : 'Incorrect'}, time ${
        a.responseTime
      }s`
  )
  .join('\n')}
Please:
1. Compute the estimated IQ score (µ=100, σ=15).
2. Classify the user.
3. Provide personalized feedback (verbal, logical, spatial...).
4. Suggest three targeted exercises or resources.

Respond in JSON with keys: iqScore, classification, feedback, recommendations.
      `;
      // استدعاء GPT-4
      const completion = await openai.createChatCompletion({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: 'You are a helpful assistant.' },
          { role: 'user', content: prompt.trim() },
        ],
        temperature: 0.7,
        max_tokens: 500,
      });
      const raw = completion.data.choices[0].message.content.trim();
      const analysis = JSON.parse(raw);
      return res.status(200).json({ success: true, analysis });
    } catch (err) {
      console.error(err);
      return res
        .status(500)
        .json({ success: false, error: err.message });
    }
  }

  // 4) محادثة عامة (POST /api/chat)
  if (req.method === 'POST' && pathname === '/api/chat') {
    try {
      const { messages } = req.body;
      const completion = await openai.createChatCompletion({
        model: 'gpt-4',
        messages,
        temperature: 0.7,
        max_tokens: 1000,
      });
      const reply = completion.data.choices[0].message;
      return res.status(200).json({ success: true, reply });
    } catch (err) {
      console.error(err);
      return res
        .status(500)
        .json({ success: false, error: err.message });
    }
  }

  // 5) أي مسار آخر → 404
  return res.status(404).send('Not Found');
};
