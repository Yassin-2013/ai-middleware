// index.js

require('dotenv').config();
const express    = require('express');
const bodyParser = require('body-parser');
const cors       = require('cors');
const { Configuration, OpenAIApi } = require('openai');

const app  = express();
const port = process.env.PORT || 3000;

// إعداد OpenAI
const config = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(config);

// Middleware
app.use(cors());
app.use(bodyParser.json());

/**
 * POST /api/analyze
 * يتوقع JSON payload مثل:
 * {
 *   "userId": "user-123",
 *   "answers": [
 *     { "questionId": 1, "correct": true,  "responseTime": 12 },
 *     { "questionId": 2, "correct": false, "responseTime": 20 },
 *     ...
 *   ]
 * }
 */
app.post('/api/analyze', async (req, res) => {
  try {
    const { userId, answers } = req.body;

    // بناء مدخل GPT-4
    const prompt = `
You are an IQ test analyst. The user (ID: ${userId}) completed an IQ test:
${answers.map(a => `- Q${a.questionId}: ${a.correct ? 'Correct' : 'Incorrect'}, time ${a.responseTime}s`).join('\n')}
Please:
1. Compute the estimated IQ score (µ=100, σ=15).
2. Classify the user.
3. Provide personalized feedback (verbal, logical, spatial...).
4. Suggest three targeted exercises or resources.

Respond in JSON with: iqScore, classification, feedback, recommendations.
`;

    const completion = await openai.createChatCompletion({
      model: "gpt-4",
      messages: [
        { role: "system", content: "You are a helpful assistant." },
        { role: "user",   content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 500
    });

    const analysis = JSON.parse(completion.data.choices[0].message.content.trim());
    res.json({ success: true, analysis });

  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, error: err.message });
  }
});


/**
 * POST /api/chat
 * يتوقع JSON payload مثل:
 * {
 *   "messages": [
 *     { "role": "system", "content": "You are a helpful assistant." },
 *     { "role": "user",   "content": "Hello!" }
 *   ]
 * }
 */
app.post('/api/chat', async (req, res) => {
  try {
    const { messages } = req.body;

    const completion = await openai.createChatCompletion({
      model: "gpt-4",
      messages,
      temperature: 0.7,
      max_tokens: 1000
    });

    const reply = completion.data.choices[0].message;
    res.json({ success: true, reply });

  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// نقطة النهاية الافتراضية
app.get('/', (req, res) => {
  res.send('IQ Test & Chat Middleware is up and running.');
});

// تشغيل الخادم
app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
