const { Configuration, OpenAIApi } = require("openai");

const config = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(config);

module.exports = async (req, res) => {
  const { method, url } = req;

  // السماح بـ CORS للجميع
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (method === "OPTIONS") {
    res.status(200).end();
    return;
  }

  try {
    if (method === "POST" && url.endsWith("/analyze")) {
      const { userId, answers } = req.body;

      const prompt = `
You are an IQ test analyst. The user (ID: ${userId}) completed an IQ test:
${answers.map(a => `- Q${a.questionId}: ${a.correct ? 'Correct' : 'Incorrect'}, time ${a.responseTime}s`).join('\n')}
Please:
1. Compute the estimated IQ score (µ=100, σ=15).
2. Classify the user.
3. Provide personalized feedback (verbal, logical, spatial...).
4. Suggest three targeted exercises or resources.

Respond in JSON with: iqScore, classification, feedback, recommendations.
`;

      const completion = await openai.createChatCompletion({
        model: "gpt-4",
        messages: [
          { role: "system", content: "You are a helpful assistant." },
          { role: "user", content: prompt },
        ],
        temperature: 0.7,
        max_tokens: 500,
      });

      const analysis = JSON.parse(
        completion.data.choices[0].message.content.trim()
      );
      res.status(200).json({ success: true, analysis });

    } else if (method === "POST" && url.endsWith("/chat")) {
      const { messages } = req.body;

      const completion = await openai.createChatCompletion({
        model: "gpt-4",
        messages,
        temperature: 0.7,
        max_tokens: 1000,
      });

      const reply = completion.data.choices[0].message;
      res.status(200).json({ success: true, reply });

    } else {
      res.status(404).json({ success: false, message: "Invalid endpoint" });
    }

  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, error: error.message });
  }
};
